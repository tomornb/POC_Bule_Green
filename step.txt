######################################################################################################
### prepare base docker imags
######################################################################################################
docker pull python:slim-bullseye
docker run -it --rm python:slim-bullseye bash

######################################################################################################
### create Docker file
######################################################################################################
FROM python:slim-bullseye

## set proxy for palladium12
#ENV http_proxy "http://10.117.4.18:8080"
#ENV https_proxy "http://10.117.4.18:8080"

## install curl
RUN apt update && apt upgrade
RUN apt install curl -y

## copy script
COPY app/ app/

## Install packages
#RUN pip install flask --user
RUN pip install -r /app/requirements.txt

## Run the built product when the container launches
ENTRYPOINT python "/app/service_1.py"

######################################################################################################
### docker build imags on githup
######################################################################################################
	# create respositories : POC_Bule_Green
	# git clone https://github.com/tomornb/POC_Bule_Green.git
	# new folder and file : .github/workflows/
		- docker-publish.yml
		- docker-image.yml
	# create parameter for login dockerhup
		- https://github.com/tomornb/POC_Bule_Green/settings/secrets/actions
			- DOCKER_PASSWORD
			- DOCKER_USERNAME
	# create new release
		- https://github.com/tomornb/POC_Bule_Green/releases/new
	# view log
		- https://github.com/tomornb/POC_Bule_Green/actions
		
#docker build --rm --no-cache -f "Dockerfile_Service_1" -t poc_bule_green:service_1 . --> build on server palladium12 เจอ error
#docker build --rm --no-cache -f "Dockerfile_Service_2" -t poc_bule_green:service_2 . --> build on server palladium12 เจอ error

######################################################################################################
### docker run 
######################################################################################################
docker pull tomornb/poc_bule_green:service_1.1
docker pull tomornb/poc_bule_green:service_2.1

docker run -d --rm -p 5001:5000  tomornb/poc_bule_green:service_1.1
docker run -d --rm -p 5002:5000  tomornb/poc_bule_green:service_2.1

[omropr@palladium12 ~]$ curl http://localhost:5001/api/task1
{"tasks1":[{"description":"Responce Service API 1","done":false,"id":1,"title":"Service API 1"}]}
[omropr@palladium12 ~]$ curl http://localhost:5001/api/task2
<!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>
[omropr@palladium12 ~]$ curl http://localhost:5002/api/task1
{"tasks1":[{"description":"Responce Service API 1","done":false,"id":1,"title":"Service API 1"}]}
[omropr@palladium12 ~]$ curl http://localhost:5002/api/task2
{"tasks2":[{"description":"Responce Service API 2.1","done":false,"id":2,"title":"Service API 2"},{"description":"Responce Service API 2.2","done":false,"id":3,"title":"Service API 2"}]}
[omropr@palladium12 ~]$

######################################################################################################
### request infra team P'Pui install on server palladium12 
######################################################################################################
kubeadm/kubelet v1.26.3		
containerd 1.6.20		
 
Athakorn Sukboonyasatit		
vi /etc/yum.repos.d/kubernetes.repo		
[kubernetes]		
name=Kubernetes		
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64		
enabled=1		
gpgcheck=1		
repo_gpgcheck=1		
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg		
exclude=kube*		

vi /etc/sysctl.d/k8s.conf		
net.bridge.bridge-nf-call-ip6tables = 1		
net.bridge.bridge-nf-call-iptables = 1		
net.ipv4.ip_forward = 1		
export https_proxy=http://111.84.55.241:8080		
yum clean all		
yum install -y kubeadm-1.26.3-0 kubelet-1.26.3-0 kubectl-1.26.3-0 --disableexcludes=kubernetes		
yum install -y /tmp/containerd.io-1.6.20-3.1.el8.x86_64.rpm		
sysctl --system		
systemctl enable --now kubelet		
systemctl daemon-reload		
systemctl restart kubelet		
systemctl restart containerd		
systemctl enable containerd		
rpm -qa | egrep "kube|containerd"
